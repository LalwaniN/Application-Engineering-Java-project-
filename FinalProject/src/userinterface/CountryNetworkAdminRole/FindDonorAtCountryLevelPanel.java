/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.CountryNetworkAdminRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Hospital.Patient;
import Business.Network.Network;
import Business.Organization.OPTOrganization.OPTELabOrganization;
import Business.Organization.Organization;
import Business.RegCenter.Donor;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.FindDonorRequest;
import Business.WorkQueue.OrganMatchingWorkRequest;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Neha
 */
public class FindDonorAtCountryLevelPanel extends javax.swing.JPanel {

    /**
     * Creates new form FindDonorPanel
     */
    private JPanel userProcessContainer;
    private EcoSystem system;
    private UserAccount account;
    private ArrayList<Donor> foundDonorList;
    private FindDonorRequest request;
    private Network countryNetwork;

    public FindDonorAtCountryLevelPanel(JPanel userProcessContainer, UserAccount account, EcoSystem system, FindDonorRequest request, ArrayList<Donor> foundDonorList,Network countryNetwork) {
       initComponents();
        this.userProcessContainer = userProcessContainer;
         this.system = system;
         this.account = account;
         this.foundDonorList=foundDonorList;
         this.request=request;
         this.countryNetwork=countryNetwork;
       populateDonorTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        DonorDetailTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        forwardForOrganMatching = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 255, 255));

        DonorDetailTable.setBackground(new java.awt.Color(204, 255, 255));
        DonorDetailTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null}
            },
            new String [] {
                "DonorID", "Donor Name", "City"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(DonorDetailTable);

        jButton1.setText("<<Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        forwardForOrganMatching.setBackground(new java.awt.Color(0, 0, 0));
        forwardForOrganMatching.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        forwardForOrganMatching.setForeground(new java.awt.Color(255, 153, 153));
        forwardForOrganMatching.setText("Forward for Organ Matching>>");
        forwardForOrganMatching.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forwardForOrganMatchingActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(111, 111, 111)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 672, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(330, 330, 330)
                        .addComponent(forwardForOrganMatching)))
                .addContainerGap(101, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(93, 93, 93)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addComponent(forwardForOrganMatching, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(186, 186, 186))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void forwardForOrganMatchingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forwardForOrganMatchingActionPerformed
        for (Donor donor : foundDonorList) {
            OrganMatchingWorkRequest organMatchingRequest = new OrganMatchingWorkRequest();
            organMatchingRequest.setDonor(donor);
            organMatchingRequest.setPatient(request.getPatientDetails());
            organMatchingRequest.setRequestDate(new Date());
            organMatchingRequest.setStatus("Request Raised");
            organMatchingRequest.setSender(account);

            Patient patient = request.getPatientDetails();
            Organization org = null;
            for (Network stateNetwork:countryNetwork.getSubNetwork() )
            for (Network city : stateNetwork.getSubNetwork()) {
                if (patient.getPatientLocation().equalsIgnoreCase(city.getNetworkName())) {
                    for (Enterprise enterprise : city.getEnterpriseDirectory().getEnterpriseList()) {
                        if (enterprise.getEnterpriseType().getValue().equals(Enterprise.EnterpriseType.OrganProcAndTransCenter.toString())) {
                            for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                                if (organization instanceof OPTELabOrganization) {
                                    org = organization;
                                    break;
                                }
                            }
                        }
                    }
                }
            }
            if (org != null) {
                org.getWorkQueue().getWorkRequestList().add(organMatchingRequest);
            }
            account.getWorkQueue().getWorkRequestList().add(organMatchingRequest);
        }

        JOptionPane.showMessageDialog(null, "Request sent for organ matching");
    }//GEN-LAST:event_forwardForOrganMatchingActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        CountryNetworkAdminWorkRequestArea sysAdminwjp = (CountryNetworkAdminWorkRequestArea) component;
        sysAdminwjp.populateRequests();
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_jButton1ActionPerformed
    public void populateDonorTable(){
        
        DefaultTableModel model = (DefaultTableModel) DonorDetailTable.getModel();
        model.setRowCount(0);
        
        
                    for(Donor donor : foundDonorList){
                        Object[] row = new Object[3];
                        row[0] = donor;
                        row[1] = donor.getDonorName();
                        row[2] = donor.getDonorAddress(); 
                        model.addRow(row);
                    }
                }
            
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable DonorDetailTable;
    private javax.swing.JButton forwardForOrganMatching;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
