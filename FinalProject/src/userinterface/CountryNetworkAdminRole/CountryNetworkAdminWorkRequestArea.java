/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.CountryNetworkAdminRole;

import Business.EcoSystem;
import Business.Network.Network;
import Business.RegCenter.Donor;
import Business.RegCenter.Organ;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.FindDonorRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.Font;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Neha
 */
public class CountryNetworkAdminWorkRequestArea extends javax.swing.JPanel {
 private JPanel userProcessContainer;
    private EcoSystem system;
    private UserAccount account;
    private Network countryNetwork;
    /**
     * Creates new form NetworkAdminWorkArea
     */

    public CountryNetworkAdminWorkRequestArea(JPanel userProcessContainer, UserAccount account, EcoSystem system, Network countryNetwork) {
       initComponents();
       this.userProcessContainer = userProcessContainer;
         this.system = system;
         this.account = account;
         this.countryNetwork=countryNetwork;
         
         populateRequests();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        workrequestTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        findDonorInCountryBtn = new javax.swing.JButton();
        backButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 255, 255));

        workrequestTable.setBackground(new java.awt.Color(204, 255, 255));
        workrequestTable.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        workrequestTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "RequestID", "State", "City", "Hospital", "PatientID", "PatientName", "RequestStatus"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workrequestTable);

        jLabel1.setFont(new java.awt.Font("Segoe UI Semibold", 3, 20)); // NOI18N
        jLabel1.setText(" Admin Work Area");

        findDonorInCountryBtn.setBackground(new java.awt.Color(0, 0, 0));
        findDonorInCountryBtn.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        findDonorInCountryBtn.setForeground(new java.awt.Color(255, 153, 153));
        findDonorInCountryBtn.setText("Find Donor");
        findDonorInCountryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findDonorInCountryBtnActionPerformed(evt);
            }
        });

        backButton.setBackground(new java.awt.Color(0, 0, 0));
        backButton.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        backButton.setForeground(new java.awt.Color(255, 153, 153));
        backButton.setText("<<Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(86, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 850, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(91, 91, 91))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addComponent(backButton)
                        .addGap(331, 331, 331)
                        .addComponent(findDonorInCountryBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(456, 456, 456)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addComponent(jLabel1)
                .addGap(76, 76, 76)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(findDonorInCountryBtn)
                    .addComponent(backButton))
                .addContainerGap(47, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void findDonorInCountryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findDonorInCountryBtnActionPerformed
        ArrayList<Donor> foundDonorList = new ArrayList<>();
        int selectedRow = workrequestTable.getSelectedRow();
        if (selectedRow >= 0) {
            //Find a Donor 
            FindDonorRequest request = (FindDonorRequest) workrequestTable.getValueAt(selectedRow, 0);
            Donor foundDonor = null;
           
            for (Network stateNetwork : countryNetwork.getSubNetwork()) {
                for (Donor donor : stateNetwork.getDonorDirectory().getDonorList()) {            
                 Boolean organTest = false;
                Boolean bloodTyping = false;
                Boolean bmiTest = false;

                if (donor.isAvailable()) {
                    for (Organ organ : donor.getOrganDonateList()) {
                        if (request.getPatientDetails().getOrganNeeded().getOrganName().equals(organ.getOrganName())) {
                            organTest = true;
                            break;

                        }
                    }
                    String donorBloodGroup = donor.getHealthDetails().getBloodGroup();
                    String patientBloodGroup = request.getPatientDetails().getBloodType();
                    bloodTyping = bloodTest(donorBloodGroup, patientBloodGroup);

                    if (Math.abs(donor.getHealthDetails().getBmi() - request.getPatientDetails().getBmi()) < 5) {
                        bmiTest = true;
                    }

                    if (bloodTyping == true && organTest == true && bmiTest == true) {
                        foundDonor = donor;
                        foundDonorList.add(foundDonor);
                    }

                }


                }

            }
            
            if (foundDonorList.size()==0){
                request.setStatus("No Donor Found in Country");
                JOptionPane.showMessageDialog(null, "No Donor found , request status updated");
            }
            else{
                
            FindDonorAtCountryLevelPanel donorFound = new FindDonorAtCountryLevelPanel(userProcessContainer, account, system, request, foundDonorList,countryNetwork);
            userProcessContainer.add("FindDonorAtCountryLevelPanel", donorFound);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
            }

        }
    }//GEN-LAST:event_findDonorInCountryBtnActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        userProcessContainer.remove(this); 
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backButtonActionPerformed
    public void populateRequests() {
        workrequestTable.getTableHeader().setFont(new Font("Segoe UI Semibold", Font.PLAIN, 20));
        DefaultTableModel model = (DefaultTableModel) workrequestTable.getModel();
        model.setRowCount(0);
        if (countryNetwork.getWorkQueue().getWorkRequestList().size() > 0) {
            for (WorkRequest request : countryNetwork.getWorkQueue().getWorkRequestList()) {
                Object[] row = new Object[7];
                row[0] = request;
                row[1] = ((FindDonorRequest) request).getHospitalState();
                row[2] = ((FindDonorRequest) request).getHospitalCity();
                row[3] = ((FindDonorRequest) request).getHospitalName();
                row[4] = ((FindDonorRequest) request).getPatientDetails().getPatientID();
                row[5] = ((FindDonorRequest) request).getPatientDetails().getPatientName();
                row[6] = request.getStatus();
                model.addRow(row);
            }
        }
    }
    private Boolean bloodTest(String donorBloodGroup, String patientBloodGroup) {

        if (donorBloodGroup.equals("O") && (patientBloodGroup.equals("O") || patientBloodGroup.equals("A") || patientBloodGroup.equals("B") || patientBloodGroup.equals("AB"))) {
            return true;
        } else if (donorBloodGroup.equals("A") && (patientBloodGroup.equals("A") || patientBloodGroup.equals("AB"))) {
            return true;
        } else if (donorBloodGroup.equals("B") && (patientBloodGroup.equals("B") || patientBloodGroup.equals("AB"))) {
            return true;
        } else if (donorBloodGroup.equals("AB") && patientBloodGroup.equals("A")) {
            return true;
        } else {
            return false;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JButton findDonorInCountryBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable workrequestTable;
    // End of variables declaration//GEN-END:variables
}
