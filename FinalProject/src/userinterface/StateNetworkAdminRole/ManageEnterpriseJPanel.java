/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.StateNetworkAdminRole;

//import Business.EcoSystem;
//import Business.Enterprise.Enterprise;
//import Business.Network.Network;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.awt.Component;
import java.awt.Font;
import java.awt.event.ItemEvent;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author raunak
 */
public class ManageEnterpriseJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private EcoSystem system;
    private UserAccount account;

    /**
     * Creates new form ManageEnterpriseJPanel
     */
    public ManageEnterpriseJPanel(JPanel userProcessContainer, UserAccount account, EcoSystem system) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.system = system;
        this.account = account;

        populateTable();
        //  populateCountryName();
        cityErrLabel.setVisible(false);
        nameErrLabel.setVisible(false);
        populateCityComboBox();
        populateEnterpriseComboBox();
        enterpriseTypeJComboBox.setEnabled(false);
        enterpriseNameTextField.setEnabled(false);
    }

    private void populateTable() {
        enterpriseJTable.getTableHeader().setFont(new Font("Segoe UI Semibold", Font.PLAIN, 18));
        DefaultTableModel model = (DefaultTableModel) enterpriseJTable.getModel();

        model.setRowCount(0);
        for (Network network : system.getNetworkList()) {
            for (Network state : network.getSubNetwork()) {
                if (state.getUserAccountDirectory().getUserAccountList().size() > 0) {
                    if (state.getUserAccountDirectory().getUserAccountList().get(0).getUsername().equals(account.getUsername())) {
                        for (Network cityNetwork : state.getSubNetwork()) {
                            for (Enterprise enterprise : cityNetwork.getEnterpriseDirectory().getEnterpriseList()) {
                                Object[] row = new Object[5];
                                row[0] = enterprise.getName();
                                row[1] = cityNetwork.getNetworkName();
                                row[2] = enterprise.getEnterpriseType().getValue();
                                model.addRow(row);
                            }
                        }
                    }
                }

            }
        }
    }
    public boolean validateData(){
        
        if(CityComboBox.getSelectedItem().toString().equalsIgnoreCase("Please Select")){
            cityErrLabel.setVisible(true);
            return false;
        }else{
            cityErrLabel.setVisible(false);
        }
        if(enterpriseNameTextField.getText().equalsIgnoreCase("")){
            nameErrLabel.setVisible(true);
            return false;
        }else{
            nameErrLabel.setVisible(false);
        }
        return true;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        enterpriseJTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        enterpriseNameTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        enterpriseTypeJComboBox = new javax.swing.JComboBox();
        submitJButton = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        CityComboBox = new javax.swing.JComboBox();
        stateNameTextBox = new javax.swing.JTextField();
        countryNameTextBox = new javax.swing.JTextField();
        cityErrLabel = new javax.swing.JLabel();
        nameErrLabel = new javax.swing.JLabel();

        setBackground(new java.awt.Color(204, 255, 255));

        enterpriseJTable.setBackground(new java.awt.Color(204, 255, 255));
        enterpriseJTable.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        enterpriseJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Enterprise Name", "City Network", "Enterprise Type"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(enterpriseJTable);

        jLabel1.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        jLabel1.setText("Country : ");

        jLabel2.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        jLabel2.setText("Name : ");

        enterpriseNameTextField.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        jLabel3.setText("Enterprise Type : ");

        enterpriseTypeJComboBox.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        enterpriseTypeJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        submitJButton.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        submitJButton.setText("Submit");
        submitJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitJButtonActionPerformed(evt);
            }
        });

        backJButton.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        jLabel4.setText("State : ");

        jLabel5.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        jLabel5.setText("City : ");

        CityComboBox.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        CityComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        CityComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                CityComboBoxItemStateChanged(evt);
            }
        });

        stateNameTextBox.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N

        countryNameTextBox.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N

        cityErrLabel.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        cityErrLabel.setText("Select City");

        nameErrLabel.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        nameErrLabel.setText("Name cannot be left blank");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 760, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addComponent(jLabel1)
                        .addGap(131, 131, 131)
                        .addComponent(countryNameTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addComponent(jLabel4)
                        .addGap(155, 155, 155)
                        .addComponent(stateNameTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addComponent(jLabel3)
                        .addGap(67, 67, 67)
                        .addComponent(enterpriseTypeJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(320, 320, 320)
                        .addComponent(submitJButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(backJButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(165, 165, 165)
                                .addComponent(CityComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(148, 148, 148)
                                .addComponent(enterpriseNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(39, 39, 39)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cityErrLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nameErrLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(79, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jLabel1))
                    .addComponent(countryNameTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(jLabel4))
                    .addComponent(stateNameTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel5)
                    .addComponent(CityComboBox)
                    .addComponent(cityErrLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel3))
                    .addComponent(enterpriseTypeJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel2))
                    .addComponent(enterpriseNameTextField)
                    .addComponent(nameErrLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(53, 53, 53)
                .addComponent(submitJButton)
                .addGap(97, 97, 97)
                .addComponent(backJButton))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void submitJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitJButtonActionPerformed
        if (validateData()) {
            Network cityNetwork = (Network) CityComboBox.getSelectedItem();
            Enterprise.EnterpriseType type = (Enterprise.EnterpriseType) enterpriseTypeJComboBox.getSelectedItem();

            if (cityNetwork == null || type == null) {
                JOptionPane.showMessageDialog(null, "Invalid Input!");
                return;
            }

            String name = enterpriseNameTextField.getText();

            Enterprise enterprise = cityNetwork.getEnterpriseDirectory().createAndAddEnterprise(name, type);
            //DataInitialization.populateEnterpriseDonorList(cityNetwork);

            if (type.equals(Enterprise.EnterpriseType.DonorRegCenter)) {
                enterprise.getOrganizationDirectory().createOrganization(Organization.Type.Doctor);
            } else if (type.equals(Enterprise.EnterpriseType.Hospital)) {
                enterprise.getOrganizationDirectory().createOrganization(Organization.Type.OrganTransaplantDeptRep);
            } else if (type.equals(Enterprise.EnterpriseType.OrganProcAndTransCenter)) {
                enterprise.getOrganizationDirectory().createOrganization(Organization.Type.Surgeon);
                enterprise.getOrganizationDirectory().createOrganization(Organization.Type.OPTELab);
                 enterprise.getOrganizationDirectory().createOrganization(Organization.Type.OPTEAdmin);
            } else if (type.equals(Enterprise.EnterpriseType.LegalEnterprise)) {
                enterprise.getOrganizationDirectory().createOrganization(Organization.Type.LegalDepartment);
            }
            populateTable();
        }


    }//GEN-LAST:event_submitJButtonActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        StateAdminWorkArea sysAdminwjp = (StateAdminWorkArea) component;
        sysAdminwjp.populateTree();
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void CityComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_CityComboBoxItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED && !CityComboBox.getSelectedItem().equals("Please select")) {
            enterpriseTypeJComboBox.setEnabled(true);
            enterpriseNameTextField.setEnabled(true);
        }

    }//GEN-LAST:event_CityComboBoxItemStateChanged
//    private void populateCountryName() {
//        ArrayList<Network> networkList = system.getNetworkList();
//        Network network;
//        for (int i = 0; i < networkList.size(); i++) {
//            network = networkList.get(i);
//            if (network.getUserAccountDirectory().getUserAccountList().size() > 0) {
//                if (network.getUserAccountDirectory().getUserAccountList().get(0).getUsername().equals(account.getUsername())) {
//                    stateNameTextBox.setText(network.getNetworkName());
//                }
//            }
//        }
//    }

    private void populateCityComboBox() {
        ArrayList<Network> networkList = system.getNetworkList();
        CityComboBox.removeAllItems();
        CityComboBox.addItem("Please select");
        for (Network country : networkList) {
            if (country.getUserAccountDirectory().getUserAccountList().size() > 0) {
                for (Network state : country.getSubNetwork()) {
                    if (state.getUserAccountDirectory().getUserAccountList().get(0).getUsername().equals(account.getUsername())) {
                        countryNameTextBox.setText(country.getNetworkName());
                        stateNameTextBox.setText(state.getNetworkName());
                        for (Network city : state.getSubNetwork()) {
                            CityComboBox.addItem(city);
                        }
                    }
                }
            }
        }

    }

    private void populateEnterpriseComboBox() {
        enterpriseTypeJComboBox.removeAllItems();
        enterpriseTypeJComboBox.removeAllItems();
        for (Enterprise.EnterpriseType type : Enterprise.EnterpriseType.values()) {
            enterpriseTypeJComboBox.addItem(type);
        }

    }

//     private void populateStateCombo(String[] statelist){
//        StateComboBox.removeAllItems();
//        StateComboBox.addItem("Please Select");
//        for(String statename : statelist){
//            StateComboBox.addItem(statename);
//        }
//    }
//     private void populateCityCombo(String[] cityList){
//        CityComboBox.removeAllItems();
//        CityComboBox.addItem("Please select");
//        for(String city : cityList){
//            CityComboBox.addItem(city);
//        }
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox CityComboBox;
    private javax.swing.JButton backJButton;
    private javax.swing.JLabel cityErrLabel;
    private javax.swing.JTextField countryNameTextBox;
    private javax.swing.JTable enterpriseJTable;
    private javax.swing.JTextField enterpriseNameTextField;
    private javax.swing.JComboBox enterpriseTypeJComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel nameErrLabel;
    private javax.swing.JTextField stateNameTextBox;
    private javax.swing.JButton submitJButton;
    // End of variables declaration//GEN-END:variables
}
